<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations.                               *
* Developed By: Falak Nawaz                                       *
*             : Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Mail : info@ictinnovations.com                                  *
******************************************************************/

// $Id: ictpbx.module,v 1.0 2012/02/29 18:08:59 ictinnovations Exp $

/**
 * Implementation of hook_menu().
 *
 */ 
function ictpbx_menu() {
  $items = array();
  
  $items['ictpbx'] = array(
    'title'            => 'ICTPBX System',
    'description'      => 'Configure ICTPBX System Settings',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'position'         => 'left',
    'weight'           => -20,
  );

  $items['setting'] = array(
    'title'            => 'Settings',
    'description'      => 'My User Settings',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'ictfax_access',
    'access arguments' => array('can use ictfax'),
    'position'         => 'left',
    'weight'           => -10,
  );
  
  /*$items['ictpbxconf'] = array(
    'title'            => 'Service Configuration',
    'description'      => 'Configure ICTPBX Services',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'position'         => 'left',
  );*/ 
  $items['ictpbx/packages'] = array(
    'title'            => 'Package Settings',
    'description'      => 'Configure ICTPBX Packages',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 41,
  );
  $items['ictpbx/packages/package1'] = array(
    'title'            => 'Package 1',
    'description'      => 'Configure Package 1',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_admin_package1'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['ictpbx/packages/package2'] = array(
    'title'            => 'Package 2',
    'description'      => 'Configure Package 2',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_admin_package2'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['ictpbx/packages/package3'] = array(
    'title'            => 'Package 3',
    'description'      => 'Configure Package 3',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_admin_package3'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'type'             => MENU_NORMAL_ITEM,
  );
  
  $items['ictpbx/default_settings'] = array(
    'title'            => 'Default Settings',
    'description'      => 'Configure Default Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_default_settings'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 42,
  );
  
    $items['admin/ictfax'] = array(
    'title'            => 'ICTFax System',
    'description'      => 'Configure ICTFax System',
    'page callback'    => 'system_admin_menu_block_page',
    'file'             => 'system.admin.inc',
    'file path'        => drupal_get_path('module', 'system'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'position'         => 'left',
    'weight'           => -50,
  );

  $items['admin/ictfax/setting'] = array(
    'title'            => 'Application Path Settings',
    'description'      => 'Configure ICTFax Path Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictfax_path_settings'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'weight'           => -10,
  );

  $items['admin/ictfax/plivo_setting'] = array(
    'title'            => 'Plivo Gateway Settings',
    'description'      => 'Configure Plivo Gateway Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictfax_plivo_settings'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx system admin'),
    'weight'           => -9,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on campaign module.
 */
function ictpbx_permission() {
  return array(
    'ictpbx blocked' => array('title' => 'ictpbx blocked'),
    'ictpbx user'  => array('title' => 'ictpbx user'),
    'ictpbx admin'  => array('title' => 'ictpbx admin'),
    'ictpbx system admin'  => array('title' => 'ictpbx system admin')
  );
}

function ictpbx_access($access) {
  global $user;

  if (is_array($access)) $access = $access[0];
  /*if ($user->phone_verified == 0) {
  	if ($access == 'ictpbx blocked') {
  	  return true;
  	} else {
  	  return false;
  	}
  }*/
  if (!user_access($access)) return false;

  return true;
}


/**
 * Loader function for individual ictregistrations using UID.
 *
 */
function ictpbx_loadbyUID($uid) {
  $sql    = "SELECT * FROM {ictpbx_user} WHERE uid = :uid";
  $result = db_query($sql, array(':uid' => $uid));
  if ($ictpbx_user = $result->fetchAssoc()) {
    return $ictpbx_user;
  }
  else {
    drupal_set_message(t('Specified ICTPBX User does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}


/**
 * Build the ictpbx editing form.
 *
 * @ingroup forms
 * @see ictpbx_form_submit()
 */
function ictpbx_form_user_register_form_alter(&$form, &$form_state) {
  
  $form['personal'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Personal Information'),
  );

  $form['personal']['first_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('First Name'),
    '#required'      => TRUE,
  );

  $form['personal']['last_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Last Name'),
    '#required'      => TRUE,
  );

  $form['contact'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Contact Information'),
  );

  $form['contact']['phone_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone'),
    '#required'      => TRUE,
  );
  
  $form['contact']['mobile_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Mobile'),
    '#required'      => TRUE,
  );
  
  $form['contact']['fax_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Fax'),
    '#required'      => TRUE,
  );

  $form['contact']['address'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Address'),
    '#required'      => TRUE,
  );
  
  $form['contact']['country'] = array(
    '#type' => 'country',
    '#title' => 'Country',
    '#required'      => TRUE,
  );

  $form['contact']['company'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Company'),
  );

  $form['contact']['website'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Website'),
  );
  
  $form['#validate'][] = 'ictpbx_form_validate';
  
  $form['#submit'][] = 'ictpbx_form_submit';
  
  return $form;
}

function ictpbx_form_validate($form, &$form_state) {
  $existing_record = 0;
  $ictpbx = $form_state['values'];
  
  // validate here 

}

/**
 * Inserts a new ictpbx user, or updates an existing one.
 *
 */
function ictpbx_form_submit($form, &$form_state) {
  $ictpbx_user = $form_state['values'];
  $ictpbx_user['active'] = 0;
  
  if (isset($ictpbx_user['ictpbx_user_id'])) {
    drupal_write_record('ictpbx_user', $ictpbx_user, 'ictpbx_user_id');
  }
  else {
    drupal_write_record('ictpbx_user', $ictpbx_user);
  }  
}

/* 
* To show custom fields on the user profile page as well
*/
function ictpbx_form_user_profile_form_alter(&$form, $form_state)
{
  $uid = $form_state['user']->uid;  
  $edit = ictpbx_loadbyUID($uid);

  $form['personal'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Personal Information'),
  );

  // If we're editing an existing user, we'll add a value field to the form
  // containing the user's unique ID.
  if (!empty($edit['ictpbx_user_id'])) {
    $form['personal']['ictpbx_user_id'] = array(
      '#type'        => 'value',
      '#value'       => $edit['ictpbx_user_id'],
    );
  }
  
  $form['personal']['first_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('First Name'),
    '#required'      => TRUE,
    '#default_value' => $edit['first_name'],
  );

  $form['personal']['last_name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Last Name'),
    '#required'      => TRUE,
    '#default_value' => $edit['last_name'],
  );

  $form['contact'] = array(
    '#type'          => 'fieldset',
    '#title'         => t('Contact Information'),
  );

  $form['contact']['phone_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Phone'),
    '#required'      => TRUE,
    '#default_value' => $edit['phone_number'],
  );
  
  $form['contact']['mobile_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Mobile'),
    '#required'      => TRUE,
    '#default_value' => $edit['mobile_number'],
  );
  
  $form['contact']['fax_number'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Fax'),
    '#required'      => TRUE,
    '#default_value' => $edit['fax_number'],
  );

  $form['contact']['address'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Address'),
    '#required'      => TRUE,
    '#default_value' => $edit['address'],
  );
  
  $form['contact']['country'] = array(
    '#type' => 'country',
    '#title' => 'Country',
    '#required'      => TRUE,
    '#default_value' => $edit['country'],
  );

  $form['contact']['company'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Company'),
  );

  $form['contact']['website'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Website'),
    '#default_value' => $edit['website'],
  );
  
  $form['#validate'][] = 'ictpbx_form_validate';
  
  $form['#submit'][] = 'ictpbx_form_submit';
  
  return $form;

}

/**
 * Loader function for all services.
 */
function ictpbx_service_option() {
  $sql = "SELECT * FROM {ictpbx_service}";
  $result = db_query($sql);
  $rows = array();
  while ($service = $result->fetchAssoc()) {
    $row_id = $service['ictpbx_service_id'];
    $rows[$row_id] = check_plain($service['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}

/**
 * Loader function for all technologies.
 */
function ictpbx_technology_option() {
  $sql = "SELECT * FROM {ictpbx_technology}";
  $result = db_query($sql);
  $rows = array();
  while ($technology = $result->fetchAssoc()) {
    $row_id = $technology['ictpbx_technology_id'];
    $rows[$row_id] = check_plain($technology['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}

/**
 * Loader function for all gateways.
 */
function ictpbx_gateway_option() {
  $sql = "SELECT ictpbx_gateway_id, name FROM {ictpbx_gateway}";
  $result = db_query($sql);
  $rows = array();
  while ($gateway = $result->fetchAssoc()) {
    $row_id = $gateway['ictpbx_gateway_id'];
    $rows[$row_id] = check_plain($gateway['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}

/**
 * Loader function for all trunks.
 */
function ictpbx_user_option() {
  $sql = "SELECT ictpbx_user_id, name FROM {ictpbx_user}";
  $result = db_query($sql);
  $rows = array();
  while ($user = $result->fetchAssoc()) {
    $row_id = $user['ictpbx_user_id'];
    $rows[$row_id] = check_plain($user['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}


function ictpbx_admin_package1($form) {

  $form['package1'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Package 1 settings'),
  );
  $form['package1']['ictpbx_package1_free_fax'] = array(
    '#type'          => 'textfield',
    '#title'         => t("No. of free incoming Faxes"),
    '#default_value' => variable_get('ictpbx_package1_free_faxes', '100'),
    '#description'   => t('Number of monthly free incoming Faxes allowed for this package'),
  );
  $form['package1']['ictpbx_package1_did'] = array(
    '#type'          => 'textfield',
    '#title'         => t("No. of DID per new user"),
    '#default_value' => variable_get('ictpbx_package1_did', '1'),
    '#description'   => t('No. of assigned incoming numbers (DIDs) to new users'),
  );
  $form['package1']['ictpbx_package1_free_credit'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Free Credit"),
    '#default_value' => variable_get('ictpbx_package1_free_credit', '10'),
    '#description'   => t('Free credit for outgoing faxes to user after each payment cycle'),
  );
  $form['package1']['ictpbx_package1_drupal_role'] = array(
    '#type'          => 'select',
    '#title'         => t("Drupal Role"),
    '#default_value' => variable_get('ictpbx_package1_drupal_role', '3'),
    '#options'       => user_roles(true),
  );

  return system_settings_form($form);
}

function ictpbx_admin_package2($form) {

  $form['package2'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Package 2 settings'),
  );
  $form['package2']['ictpbx_package2_free_fax'] = array(
    '#type'          => 'textfield',
    '#title'         => t("No. of free incoming Faxes"),
    '#default_value' => variable_get('ictpbx_package2_free_faxes', '250'),
    '#description'   => t('Number of monthly free incoming Faxes allowed for this package'),
  );
  $form['package2']['ictpbx_package2_did'] = array(
    '#type'          => 'textfield',
    '#title'         => t("No. of DID per new user"),
    '#default_value' => variable_get('ictpbx_package2_did', '1'),
    '#description'   => t('No. of assigned incoming numbers (DIDs) to new users'),
  );
  $form['package2']['ictpbx_package2_free_credit'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Free Credit"),
    '#default_value' => variable_get('ictpbx_package2_free_credit', '10'),
    '#description'   => t('Free credit for outgoing faxes to user after each payment cycle'),
  );
  $form['package2']['ictpbx_package2_drupal_role'] = array(
    '#type'          => 'select',
    '#title'         => t("Drupal Role"),
    '#default_value' => variable_get('ictpbx_package2_drupal_role', '3'),
    '#options'       => user_roles(true),
  );

  return system_settings_form($form);
}

function ictpbx_admin_package3($form) {

  $form['package3'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Package 3 settings'),
  );
  $form['package3']['ictpbx_package3_free_fax'] = array(
    '#type'          => 'textfield',
    '#title'         => t("No. of free incoming Faxes"),
    '#default_value' => variable_get('ictpbx_package3_free_faxes', '500'),
    '#description'   => t('Number of monthly free incoming Faxes allowed for this package'),
  );
  $form['package3']['ictpbx_package3_did'] = array(
    '#type'          => 'textfield',
    '#title'         => t("No. of DID per new user"),
    '#default_value' => variable_get('ictpbx_package3_did', '1'),
    '#description'   => t('No. of assigned incoming numbers (DIDs) to new users'),
  );
  $form['package3']['ictpbx_package3_free_credit'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Free Credit"),
    '#default_value' => variable_get('ictpbx_package3_free_credit', '20'),
    '#description'   => t('Free credit for outgoing faxes to user after each payment cycle'),
  );
  $form['package3']['ictpbx_package3_drupal_role'] = array(
    '#type'          => 'select',
    '#title'         => t("Drupal Role"),
    '#default_value' => variable_get('ictpbx_package3_drupal_role', '3'),
    '#options'       => user_roles(true),
  );

  return system_settings_form($form);
}

function ictpbx_default_settings($form) {

  $form['general'] = array(
    '#type'  => 'fieldset',
    '#title' => t('General Settings'),
  );
  $form['general']['caller_id'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Default Outgoing Caller ID"),
    '#default_value' => variable_get('default_caller_id', '33184164306'),
    '#description'   => t('When a caller has no did, then above caller id will be used for outgoing calls.'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_ca_predicate().
 */
function ictpbx_ca_predicate() {
  $predicates = array();
  $order_args = array(
    'order'   => 'order',
  );
  print_r($order_args); exit();
  // get product module name from product id
  //$topup_product = variable_get('ictbilling_broadcast_topup_product', '1');
  //$topup_models  = array_keys(uc_product_get_models(node_load($topup_product), FALSE));
  
  // Create server account on new subscription.
  $predicates['ictpbx_update_status'] = array(
    '#title'       => t('Update Entry to ictpbx_user'),
    '#description' => t('Add/update ictpbx user.'),
    '#class'       => 'ictpbx',
    '#trigger'     => 'uc_order_status_update',
    '#status'      => 1,
    '#conditions'  => array(
      '#operator' => 'AND',
      '#conditions' => array(
        array(
          '#name' => 'uc_order_status_condition',
          '#title' => t('If the original order status was not Completed.'),
          '#argument_map' => array(
            'order' => 'order',
          ),
          '#settings' => array(
            'negate' => TRUE,
            'order_status' => 'completed',
          ),
        ),
        array(
          '#name' => 'uc_order_status_condition',
          '#title' => t('If the updated order status is Completed.'),
          '#argument_map' => array(
            'order' => 'updated_order',
          ),
          '#settings' => array(
            'order_status' => 'completed',
          ),
        ),
        /*array(                                      // condition 2 if this is package
          '#name' => 'uc_order_condition_has_products',
          '#title' => t('If order contain Broadcast TopUp product.'),
          '#argument_map' => $order_args,
          '#settings' => array(
            'products'  => $topup_models,
            'required'  => true,
            'forbidden' => false,
          ),
        ),*/
      ),
    ),
    '#actions' => array(
      array(
        '#name' => 'ictpbx_update_status',
        '#title' => t('Add TopUp amount for Broadcasting'),
        '#argument_map' => $order_args,
      ),
    ),
  );
  



  return $predicates;
}

/**
 * Implementation of hook_ca_action().
 */
function ictpbx_ca_action() {
  
  $order_arg = array(
    '#entity' => 'uc_order',
    '#title' => t('Order'),
  );
 

$actions['ictpbx_update_status'] = array(
    '#title' => t('Update the order status'),
    '#category' => t('Order'),
    '#callback' => 'ictpbx_action_update_status',
    '#arguments' => array(
      'order' => $order_arg,
    ),
  );

  return $actions;
}

// Update an order's status.
function ictpbx_action_update_status(&$order, $settings) {
  print($order); exit();
  if (uc_order_update_status($order->order_id, $settings['order_status'])) {
    $order->order_status = $settings['order_status'];
  }
}

////////////////////////////////////////////////////////////////////////////
// ICTFax Path settings
function ictfax_path_settings() {
  $form['ictfax'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Application Path Settings')
  );

  $form['ictfax']['fax_directory_outbox'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Outbox Fax Directory"),
    '#default_value' => variable_get('fax_directory_outbox', '/usr/ictfax/sites/default/files/ictfax/webfax'),
    '#description'   => t('Outbox fax directory stores the fax documents that are sent through ictfax. Recommended not to change.'),
  );

  $form['ictfax']['fax_directory_inbox'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Inbox Fax Directory"),
    '#default_value' => variable_get('fax_directory_inbox', '/usr/ictfax/sites/default/files/ictfax/inbox'),
    '#description'   => t('Inbox fax directory stores the fax documents that are received by ictfax. Recommended not to change.'),
  );

  $form['ictfax']['ictfax_app_root'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Inbox Fax Directory - Web Address"),
    '#default_value' => variable_get('ictfax_app_root', 'http://127.0.0.1/ictfax/sites/default/files/ictfax/inbox'),
    '#description'   => t('ICTFax application root address (including \'http://\'). Set accordingly for viewing an inbox fax.'),
  );

  return system_settings_form($form);
}

// ICTFax Plivo settings
function ictfax_plivo_settings() {
  $form['plivo'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Plivo Gateway Settings')
  );
  
  $form['plivo']['ictfax_drupal_root'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Application Root (w.r.t Plivo)"),
    '#default_value' => variable_get('ictfax_drupal_root', 'http://127.0.0.1/ictfax/index.php'),
    '#description'   => t('e.g. Drupal application root address (including \'http://\'). Important for Plivo Applications.'),
  );

  $form['plivo']['ictfax_plivo_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Plivo Server Address"),
    '#default_value' => variable_get('ictfax_plivo_server', '127.0.0.1'),
    '#description'   => t('Plivo Rest server IP address'),
  );

  $form['plivo']['ictfax_plivo_accountid'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Account ID"),
    '#default_value' => variable_get('ictfax_plivo_accountid', 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'),
    '#description'   => t('username for Plivo Rest API'),
  );

  $form['plivo']['ictfax_plivo_authenticationtoken'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Authentication Token"),
    '#default_value' => variable_get('ictfax_plivo_authenticationtoken', 'YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY'),
    '#description'   => t('password for Plivo Rest API'),
  );
  
  $form['plivo']['ictfax_plivo_port'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Server Port"),
    '#default_value' => variable_get('ictfax_plivo_port', '8088'),
    '#description'   => t('Port number for Plivo Rest API'),
  );

  $form['plivo']['ictfax_plivo_callerid'] = array(
    '#type'          => 'textfield',
    '#title'         => t("Default Outgoing CallerID"),
    '#default_value' => variable_get('ictfax_plivo_callerid', '1111111111'),
    '#description'   => t('Default callerid for outgoing calls'),
  );

  return system_settings_form($form);
}

