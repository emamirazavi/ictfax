<?php
/******************************************************************
* Copyright Â© 2012 ICT Innovations.                               *
* Developed By: Falak Nawaz                                       *
*             : Nasir Iqbal                                       *
*             : Tahir Almas                                       *
* Website : http://www.ictinnovations.com/                        *
* Mail : info@ictinnovations.com                                  *
******************************************************************/

// $Id: ictpbx_trunk.module,v 1.0 2012/02/29 10:42:58 ictinnovations Exp $

/**
 * @file
 * Provides support to buy trunk through web portal.
 */

/**
 * Implementation of hook_menu().
 */
function ictpbx_trunk_menu() {
  $items = array();

  $items['ictpbx/trunk'] = array(
    'title'            => 'Provider Trunks',
    'description'      => 'Manage VOIP Providers / Trunks',
    'page callback'    => 'ictpbx_trunk_list',
    'page arguments'   => array(false), // hide admin links
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx trunk user'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => 15,
  );

  $items['ictpbx/trunk/list'] = array(
    'title'            => 'List',
    'description'      => 'Manage VOIP Providers / Trunks',
    'page callback'    => 'ictpbx_trunk_list',
    'page arguments'   => array('false'), // hide admin links
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx trunk user'),
    'type'             => MENU_DEFAULT_LOCAL_TASK,
    'weight'           => 16,
  );
  
  $items['ictpbx/trunk/addnew'] = array(
    'title'            => t('Create New Provider Trunk'),
    'description'      => 'Create New Provider Trunk',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_trunk_form', array()),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx trunk user'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 17,    
  );
  
  $items['ictpbx/trunk/%ictpbx_trunk/edit'] = array(
    'title'            => t('Edit Trunk'),
    'description'      => 'Edit Trunk',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_trunk_form', 2),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx trunk user'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['ictpbx/trunk/%ictpbx_trunk/delete'] = array(
    'title'            => t('Remove Trunk'),
    'description'      => 'Remove Trunk',
    'page callback'    => 'ictpbx_trunk_delete',
    'page arguments'   => array(2),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx trunk user'),
    'type'             => MENU_CALLBACK,
  );
  
  $items['conf/trunk/setting'] = array(
    'title'            => 'Settings',
    'description'      => 'Manage trunk Settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ictpbx_trunk_admin_settings'),
    'access callback'  => 'ictpbx_access',
    'access arguments' => array('ictpbx trunk admin'),
    'type'             => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_permission().
 *
 * Defines access permissions that may be assigned to roles and used to restrict
 * access on trunkx module.
 */
function ictpbx_trunk_permission() {
  return array(
    'ictpbx trunk user' => array('title'=> 'ictpbx trunk user'),
    'ictpbx trunk admin' => array('title'=> 'ictpbx trunk admin'),
    'ictpbx trunk system admin' => array('title'=> 'ictpbx trunk system admin'),
  );
}

/**
 * Page function for trunk List
 *
 * It will show a list of available trunks in form of list
 *
 * @return
 * page html
*/
function ictpbx_trunk_list($admin_links = false) {

  $header = array(
    array('data' => t('Name'),          'field' => 'name',  'sort' => 'asc'),
    array('data' => t('Tech/Type'),     'field' => 'technology_name'),
    array('data' => t('Max Channels'),  'field' => 'channel'),
    array('data' => t('Status'),        'field' => 'active'),
    array('data' => t('Operations')),
  );
  
  $query = db_select('ictpbx_trunk', 't')->extend('PagerDefault');
  $query->fields('t', array('ictpbx_trunk_id', 'name', 'type', 'active', 'channel', 'created'));
  $query->leftjoin('ictpbx_technology','tech','tech.ictpbx_technology_id = t.technology_id');
  $query->addfield('tech', 'name', 'technology_name');
  $query->orderBy('created', 'DESC');
  //$query->condition('t.uid', $user->uid,'='); 
  
  $result = $query->limit(50)         
            ->extend('TableSort')
            ->orderByHeader($header)
            ->execute();
  
  while ($trunk = $result->fetchAssoc()) {
    $row_id = $trunk['ictpbx_trunk_id'];
    $rows[$row_id][] = check_plain($trunk['name']);
    $rows[$row_id][] = check_plain($trunk['technology_name']); 
    $rows[$row_id][] = check_plain($trunk['channel']);
    $rows[$row_id][] = check_plain($trunk['active'] ? 'Active' : 'Blocked');
    $rows[$row_id][] = _ictpbx_trunk_list_links($trunk);
  }
  if (!isset($rows)) {
    $rows[] = array(array('data' => t('No trunks available'), 'colspan' => 6));
  }
  
  $output = theme('table', array('header'=>$header, 'rows'=>$rows));
  $output .= theme('pager');

  return $output;
}

/**
 * Build the Forward and Release links for a single trunk.
 *
 * @see trunk_list()
 */
function _ictpbx_trunk_list_links($trunk) {
  $links['edit'] = array(
    'title' => t('Edit'),
    'href' => 'ictpbx/trunk/' . $trunk['ictpbx_trunk_id'] . '/edit',
    'html' => TRUE,
  );
  $links['delete'] = array(
    'title' => t('Remove'),
    'href' => 'ictpbx/trunk/' . $trunk['ictpbx_trunk_id'] . '/delete',
    'html' => TRUE,
  );
  return theme('links', array('links'=>$links, 'attributes' => array('class' => array('links', 'inline'))));
}

/**
 * Build the trunk form.
 */
function ictpbx_trunk_form($form, &$form_state, $edit = array()) {
  // It's safe to use on both an empty array, and an incoming array with full or partial data.
  $edit += array(
    'ictpbx_trunk_id' => '',
    'technology_id'   => '',
    'name'            => '',
    'description'     => '',
    'username'        => '',
    'password'        => '',
    'host'            => '',
    'port'            => '',
    'channel'         => '1',
    'prefix'          => '00',
    'dial_string'     => 'sofia/gateway/%trunk/%phone',
    'register_string' => '',
    'active'          => '',
    
  );

  // If we're editing an existing fax, we'll add a value field to the form
  // containing the fax's unique ID.
  if (!empty($edit['ictpbx_trunk_id'])) {
    $form['ictpbx_trunk_id'] = array(
      '#type'          => 'value',
      '#value'         => $edit['ictpbx_trunk_id'],
    );
  }

  $form['info'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Trunk Information'),
  );

  $form['info']['technology_id'] = array(
    '#type'          => 'select',
    '#title'         => t('Choose Provider Trunk Type'),
    '#options'       => ictpbx_technology_option(),
    '#default_value' => $edit['technology_id'],
  );

  $form['info']['name'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Trunk Name'),
    '#required'      => TRUE,
    '#default_value' => $edit['name'],
    '#description' => t('Trunk name must match with gateway name that you created in freeswitch.'),
  );

  $form['info']['description'] = array(
    '#type'          => 'textarea',
    '#title'         => t('Trunk Description'),
    '#default_value' => $edit['description'],
  );
  
  $form['info']['active'] = array(
    '#type'          => 'radios',
    '#title'         => t('Choose Status'),
    '#options'       => array(0 => 'Blocked', 1 => 'Active'),
    '#default_value' => $edit['active'],
    '#description' => t('Trunk name must match with gateway name that you created in freeswitch.'),
);
  
  $form['setting'] = array(
    '#type'  => 'fieldset',
    '#title' => t('Trunk Settings'),
  );

  $form['setting']['username'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Username'),
    '#default_value' => $edit['username'],
  );

  $form['setting']['password'] = array(
    '#type'          => 'password',
    '#title'         => t('Password'),
    '#default_value' => $edit['password'],
  );

  $form['setting']['host'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Host'),
    '#default_value' => $edit['host'],
  );

  $form['setting']['port'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Port'),
    '#default_value' => $edit['port'],
  );

  $form['setting']['channel'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Max Channels'),
    '#default_value' => $edit['channel'],
  );

  $form['setting']['prefix'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Add Prefix'),
    '#default_value' => $edit['prefix'],
  );

  $form['setting']['dial_string'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Dial String'),
    '#default_value' => $edit['dial_string'],
  );

  $form['setting']['register_string'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Register String'),
    '#default_value' => $edit['register_string'],
  );

  $form['buttons']['submit'] = array(
    '#type'          => 'submit',
    '#value'         => t('Submit'),
  );

  return $form;
}

/**
 * Inserts a new trunk, or updates an existing one.
 *
 * @param $trunk
 *   A trunk to be saved. If $trunk['trunk_id'] is set, the trunk will be updated.
 *   Otherwise, a new trunk will be inserted into the database.
 * @return
 *   The saved trunk, with its ID set.
 */
function ictpbx_trunk_form_submit($form, &$form_state) {
  global $user;

  $trunk = $form_state['values'];

  if (!isset($trunk['created'])) {
    $trunk['created'] = time();
  }
  if (!isset($trunk['created_by'])) {
    $trunk['created_by'] = $user->uid;
  }
  
  // save the trunk
  if (isset($trunk['ictpbx_trunk_id'])) {
    drupal_write_record('ictpbx_trunk', $trunk, 'ictpbx_trunk_id');
    drupal_set_message(t('Provider Trunk updated successfully!'), 'status');
  } else {
    drupal_write_record('ictpbx_trunk', $trunk);
    drupal_set_message(t('Provider Trunk created successfully!'), 'status');
  }
  
  $form_state['redirect'] = 'ictpbx/trunk/list';
}


/**
 * Loader function for individual trunks.
 */
function ictpbx_trunk_load($trunk_id) {
  $sql    = "SELECT * FROM {ictpbx_trunk} WHERE ictpbx_trunk_id = :ictpbx_trunk_id";
  //$sql    = ictbilling_db_filter($sql);
  $result = db_query($sql, array(':ictpbx_trunk_id' => $trunk_id));
  if ($trunk = $result->fetchAssoc()) {
    return $trunk;
  } else {
    drupal_set_message(t('Specified trunk does not exist! or you have not proper permissions!'), 'error');
    return FALSE;
  }
}

/**
 * Deletes a trunk, given its unique ID.
 *
 * @param $trunk
 *   An array of trunk containing the ID of a trunk.
 */
function ictpbx_trunk_delete($trunk) {
  $sql = 'DELETE FROM {ictpbx_trunk} WHERE ictpbx_trunk_id = :ictpbx_trunk_id';
  db_query($sql, array(':ictpbx_trunk_id'=>$trunk['ictpbx_trunk_id']));
  drupal_set_message(t('Contact deleted successfully!'), 'status');
  drupal_goto('ictpbx/trunk/list');
}

/**
 * Loader function for all trunks.
 */
function ictpbx_trunk_option() {
  $sql = "SELECT ictpbx_trunk_id, name FROM {ictpbx_trunk}";
  $result = db_query($sql);
  $rows = array();
  while ($trunk = $result->fetchAssoc()) {
    $row_id = $trunk['ictpbx_trunk_id'];
    $rows[$row_id] = check_plain($trunk['name']);
  }
  if (!isset($rows)) {
    return FALSE;
  }
  return $rows;
}

/**
 * Loader function for active trunks.
 */
function get_trunk_active() {
  $sql = "SELECT * FROM {ictpbx_trunk} WHERE active=1 ORDER BY created DESC LIMIT 1";
  $result = db_query($sql);
  if ($trunk = $result->fetchAssoc()) {
    return $trunk;
  } else {
    return FALSE;
  }
}

